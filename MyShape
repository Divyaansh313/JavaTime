//Program for checking if the shape is a rectangle and further a square

class Rectangle
{
	double length;
	double breadth;

	public Rectangle()
	{
		length=1.0;
		breadth=1.0;
	}


	public Rectangle(double myLength, double myBreadth)
	{
		setLength(myLength);
		setBreadth(myBreadth);
	}

		public void setLength(double length)
	{
		try
		{
		    if(length<0.0 || length>20.0)
		    throw new CustomException("Invalid value");
		    this.length = length;
		}

		catch(CustomException e)
		{
		    System.out.println(e.getMessage());
	   	}
    	}

	    	public void setBreadth(double breadth)
	{
	    try
	    {
		    if(breadth<0.0 || breadth>20.0)
		    throw new CustomException("Invalid value");
		    this.breadth = breadth;
		}
		catch(CustomException e)
		{
			System.out.println(e.getMessage());
	    	}
	}

		public double getLength()
	{
		return length;
	}
	public double getBreadth()
	{
		return breadth;
	}

	//Function for calculating Area
	public double area()
	{
		return length*breadth;
	}

	//Function for calculating perimeter
	public double perimeter()
	{
		return 2*(length+breadth);
	}

}

class CustomException extends Exception
{
	CustomException(String s)
	{
		super(s);
	}
}

//Making a child class MyShape of parent class Rectangle

public class MyShape extends Rectangle
{
	double x[];
	double y[];

	public MyShape(double lengtharr[],double breadtharr[] )
	{
		x=new double[4];
		y=new double[4];
		setValues(lengtharr,breadtharr);
	}

		public void setValues(double lengtharr[],double breadtharr[])
	{
		for(int i=0;i<4;++i)
		{
			if(lengtharr[i]<0 || breadtharr[i]<0)
			{
			System.out.println("Invalid value");
			System.exit(1);
		    	}
		}

				//Now checking if the value is greater than 20
		for(int i=0;i<4;++i)
		{
			verifyValues(lengtharr[i]);
			verifyValues(breadtharr[i]);
		}

				for(int i=0;i<4;++i)
		{
			x[i] = lengtharr[i];
			y[i] = breadtharr[i];
		}

	}

		public void Length()
	{
        	if(Math.sqrt((x[0]-x[3])*(x[0]-x[3])+(y[0]-y[3])*(y[0]-y[3]))==0)
      		{
        	System.out.println("Invalid length");
        	System.exit(0);
	  	}
	  	length=Math.sqrt((x[0]-x[3])*(x[0]-x[3])+(y[0]-y[3])*(y[0]-y[3]));
		//Calculating length by formula ((x2-x1)^2 + (y2-y1)^2) and square root of this
	}
